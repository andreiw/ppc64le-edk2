TianoCore on PowerPC 64 Little-Endian (OPAL/PowerNV)
====================================================

This is "UEFI" on top of OPAL firmware.

"UEFI" because the specification doesn't include PowerPC yet (ever?).

At some point this experiment will implement reduced-hardware
"ACPI" support, mapping the OPAL-based FDT into "ACPI" structures.

"ACPI" because it's also not specced out for PowerPC.

It's getting prototyped on top of QEMU and Skiboot (OPAL firmware).

Why
===

It's thought experiment gone too far. In short, there's IMO
value in presenting a common firmware environment shared with
other servers (X64, AARCH64). UEFI+ACPI keep the OEMs and IHVs in their
comfort zone, and reduce pointless platform boot and configuration
variance across different architectures. It also allows plug-in cards
to work (assuming EBC ROMs). Petitboot is a nice idea in theory,
but in practice it's probably more suitable to embedded environments
rather than whitebox servers that can compete with Intel boxes.

UEFI gets us a bootloader environment and device drivers for
I/O and booting via storage and networking. OPAL is the abstraction
layer for the machine.

Status
======

We don't boot to the UEFI Shell, yet we boot all the way into the
Bds graphical UI.

A lot of things are fake, including the Timer and CPU Runtime DXEs.

The EDK2 build tools have been adapted to work for ppc64le targets,
but the reset vector support could use more love to avoid needing
another ELF payload for Skiboot to actually pass control to the FD.

Building
========

You will need a LE 64-bit toolchain to build (i.e. ppc64le-linux).
A good source of toolchains is kernel.org.

After running ./edksetup.sh, modify your Conf/target.txt:
ACTIVE_PLATFORM       = PPC64Pkg/PPC64Pkg.dsc
TOOL_CHAIN_TAG        = GCC49

Then:
$ GCC49_PPC64_PREFIX=ppc64le-linux- build

Running
=======

You will need Skiboot and Benjamin Herrenschmidt's PowerNV QEMU tree.

Good directions for both QEMU/PowerNV and Skiboot:
https://www.flamingspork.com/blog/2015/08/28/running-opal-in-qemu-the-powernv-platform/

Until I fix the toolchain to create a self-booting UEFI FD, you will
also need http://github.com/andreiw/ppc64le_hello as a loader. See README
for building instructions.

After that, assuming skiboot.lid is in current working directory,
$ qemu-system-ppc64 -m 4G -M powernv -kernel ppc64le_hello -nographic -initrd ~/src/edk2/Build/PPC64/DEBUG_GCC49/FV/POWERNV.fd

You shall see some spew from Skiboot followed by a menu printed by
ppc64le_hello. Press 'I' at the menu since we want to run the FD image
passed as initrd. You should now see:

ABIv1
calling 0x40001008
PPC64LE UEFI firmware (version 0 built at 01:49:44 on Oct 11 2015)
System RAM @ 0x0 - 0xFFFFFFFF
Ipl total @ 0x40000000-0x40611000
Ipl used  @ 0x40000000-0x40211000
Stack     @ 0x40200000-0x40210000
Ipl free  @ 0x40211000-0x40611000
FDT @ 0x4060E000-0x40610D21
/memreserve/ 0x31C00000 0x20000;
/memreserve/ 0x31000000 0xC00000;
/memreserve/ 0x30300000 0xD00000;
/memreserve/ 0x30000000 0x300000;
/memreserve/ 0x39C00000 0x1C0200;
FIXME: Going to skip all 0x30000000-0x39DC0200
Loading DxeCore at 0x00405CA000 EntryPoint=0x0040608460
CoreInitializeMemoryServices:
  BaseAddress - 0x40611000 Length - 0xBF9EF000 MinimalMemorySizeNeeded - 0x10000
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B 40607418
  HOBLIST address in DXE = 0xFFFFC018
  Memory Allocation 0x00000004 0x40000000 - 0x40210FFF
  Memory Allocation 0x00000004 0x4060E000 - 0x40610FFF
  Memory Allocation 0x00000004 0x40200000 - 0x4020FFFF
  Memory Allocation 0x00000004 0x405CA000 - 0x4060DFFF
  Memory Allocation 0x00000003 0x405CA000 - 0x4060DFFF
  FV Hob            0x40000000 - 0x401FFFFF
  InstallProtocolInterface: D8117CFE-94A6-11D4-9A3A-0090273FC14D 406073A8
  InstallProtocolInterface: 8F644FA9-E850-4DB1-9CE2-0B44698E8DA4 FFFF8270
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFFF8658
  InstallProtocolInterface: 220E73B6-6BDB-4413-8405-B974B108619A FFFF5DB0
  InstallProtocolInterface: FC1BCDB0-7D31-49AA-936A-A4600D9DD083 406073C8
  Loading driver B8D9444E-D72A-451F-9BDB-BAFB52A68415
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE4A0C0
  Loading driver at 0x000FFE39000 EntryPoint=0x000FFE3F068 PPC64CpuDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE4AED8
  InstallProtocolInterface: 26BACCB1-6F42-11D4-BCE7-0080C73C8881 FFE3F008
  Loading driver B601F8C4-43B7-4784-95B1-F4226CB40CEE
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE4A340
  Loading driver at 0x000FFE24000 EntryPoint=0x000FFE2C078 RuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE4A598
  InstallProtocolInterface: B7DFB4E1-052F-449F-87BE-9818FC91B733 FFE2C008
  Loading driver F80697E9-7FD6-4665-8646-88E33EF71DFC
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE44A80
  Loading driver at 0x000FFE1A000 EntryPoint=0x000FFE22038 SecurityStubDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE44CD8
  InstallProtocolInterface: 94AB2F58-1438-4EF1-9152-18941A3A0E68 FFE22010
  InstallProtocolInterface: A46423E3-4617-49F1-B9FF-D1BFA9115839 FFE22008
  Loading driver 02B01AD5-7E59-43E8-A6D8-238180613A5A
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE44340
  Loading driver at 0x000FFDFD000 EntryPoint=0x000FFE09028 EmuVariableRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE44618
  InstallProtocolInterface: 1E5668E2-8481-11D4-BCF1-0080C73C8881 0
  InstallProtocolInterface: 6441F818-6362-4E44-B570-7DBA31DD2453 0
  Loading driver 4B28E4C7-FF36-4E10-93CF-A82159E777C5
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE43B00
  Loading driver at 0x000FFDD2000 EntryPoint=0x000FFDD9028 ResetSystemRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE43798
  InstallProtocolInterface: 27CFAC88-46CC-11D4-9A38-0090273FC14D 0
  Loading driver B336F62D-4135-4A55-AE4E-4971BBF0885D
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE42040
  Loading driver at 0x000FFDC9000 EntryPoint=0x000FFDD0068 RealTimeClock.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE42E58
  InstallProtocolInterface: 27CFAC87-46CC-11D4-9A38-0090273FC14D 0
  Loading driver 4C6E0267-C77D-410D-8100-1495911A989D
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE42940
  Loading driver at 0x000FFDC1000 EntryPoint=0x000FFDC7038 MetronomeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE42798
  InstallProtocolInterface: 26BACCB2-6F42-11D4-BCE7-0080C73C8881 FFDC7008
  Loading driver 348C4D62-BFBD-4882-9ECE-C80BB1C4783B
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE41040
  Loading driver at 0x000FFD54000 EntryPoint=0x000FFD87228 HiiDatabase.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE41E58
  InstallProtocolInterface: E9CA4775-8657-47FC-97E7-7ED65A084324 FFD87030
  InstallProtocolInterface: 0FD96974-23AA-4CDC-B9CB-98D17750322A FFD87078
  InstallProtocolInterface: EF9FC172-A1B2-4693-B327-6D32FC416042 FFD870A0
  InstallProtocolInterface: 587E72D7-CC50-4F79-8209-CA291FC1A10F FFD870F8
  InstallProtocolInterface: 0A8BADD5-03B8-4D19-B128-7B8F0EDAA596 FFD87128
  InstallProtocolInterface: 31A6406A-6BDF-4E46-B2A2-EBAA89C40920 FFD87050
  Loading driver D3987D4B-971A-435F-8CAF-4967EB627241
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE2E040
  Loading driver at 0x000FFDB9000 EntryPoint=0x000FFDBF0B8 SerialDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE2EE58
  InstallProtocolInterface: BB25CF6F-F1D4-11D2-9A0C-0090273FC1FD FFDBF058
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFDBF008
  Loading driver 9B680FCE-AD6B-4F3A-B60B-F59899003443
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE2E340
  Loading driver at 0x000FFD3B000 EntryPoint=0x000FFD505C8 DevicePathDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE2E958
  InstallProtocolInterface: 0379BE4E-D706-437D-B037-EDB82FB772A4 FFD50010
  InstallProtocolInterface: 8B843E20-8132-4852-90CC-551A4E4A7F1C FFD50050
  InstallProtocolInterface: 05C99A21-C70F-4AD2-8A5F-35DF3343F51E FFD50060
  Loading driver 49EA041E-6752-42CA-B0B1-7344FE2546B7
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE199C0
  Loading driver at 0x000FFDB1000 EntryPoint=0x000FFDB7048 PPC64TimerDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE19B98
  InstallProtocolInterface: 26BACCB3-6F42-11D4-BCE7-0080C73C8881 FFDB7008
  Loading driver 42857F0A-13F2-4B21-8A23-53D3F714B840
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE19300
  Loading driver at 0x000FFD9C000 EntryPoint=0x000FFDA4028 CapsuleRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE13018
  InstallProtocolInterface: 5053697E-2CBC-4819-90D9-0580DEEE5754 0
  Loading driver AD608272-D07F-4964-801E-7BD3B7888652
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE13BC0
  Loading driver at 0x000FFD93000 EntryPoint=0x000FFD9A028 MonotonicCounterRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE13818
  InstallProtocolInterface: 1DA97072-BDDC-4B30-99F1-72A0B56FFF2A 0
  Loading driver EBF342FE-B1D3-4EF8-957C-8048606FF671
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE120C0
  Loading driver at 0x000FFCD2000 EntryPoint=0x000FFD02138 SetupBrowser.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE12E58
  InstallProtocolInterface: B9D4C360-BCFB-4F9B-9298-53C136982258 FFD02020
  InstallProtocolInterface: A770C357-B693-4E6D-A6CF-D21C728E550B FFD02050
  InstallProtocolInterface: 1F73B18D-4630-43C1-A1DE-6F80855D7DA4 FFD02030
  Loading driver FC5C7020-1A48-4198-9BE2-EAD5ABC8CF2F
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE11040
  Loading driver at 0x000FFC27000 EntryPoint=0x000FFC77138 BdsDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE11E58
  InstallProtocolInterface: 665E3FF6-46CC-11D4-9A38-0090273FC14D FFC75008
  Loading driver F099D67F-71AE-4C36-B2A3-DCEB0EB2B7D8
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE10B40
  Loading driver at 0x000FFD33000 EntryPoint=0x000FFD39038 WatchdogTimer.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE10ED8
  InstallProtocolInterface: 665E3FF5-46CC-11D4-9A38-0090273FC14D FFD39008
  Loading driver E660EA85-058E-4B55-A54B-F02F83A24707
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE10880
  Loading driver at 0x000FFCA9000 EntryPoint=0x000FFCCF128 DisplayEngine.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE10318
  InstallProtocolInterface: 9BBE29E9-FDA1-41EC-AD52-452213742D2E FFCCF0D8
  Loading driver 51CCF399-4FDF-4E55-A45B-E123F84D456A
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDAD9C0
  Loading driver at 0x000FFD1C000 EntryPoint=0x000FFD250D8 ConPlatformDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDADB98
  InstallProtocolInterface: 18A031AB-B443-4D1A-A5C0-0C09261E9F71 FFD25008
  InstallProtocolInterface: 107A772C-D5E1-11D4-9A46-0090273FC14D FFD25068
  InstallProtocolInterface: 6A7A5CFF-E8D9-4F70-BADA-75AB3025CE14 FFD25080
  InstallProtocolInterface: 18A031AB-B443-4D1A-A5C0-0C09261E9F71 FFD25038
  InstallProtocolInterface: 107A772C-D5E1-11D4-9A46-0090273FC14D FFD25068
  InstallProtocolInterface: 6A7A5CFF-E8D9-4F70-BADA-75AB3025CE14 FFD25080
  Loading driver 9E863906-A40F-4875-977F-5B93FF237FC6
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDAA040
  Loading driver at 0x000FFD06000 EntryPoint=0x000FFD19328 TerminalDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDAA218
  InstallProtocolInterface: 18A031AB-B443-4D1A-A5C0-0C09261E9F71 FFD19018
  InstallProtocolInterface: 107A772C-D5E1-11D4-9A46-0090273FC14D FFD191A0
  InstallProtocolInterface: 6A7A5CFF-E8D9-4F70-BADA-75AB3025CE14 FFD191B8
  [BdsDxe] Locate Variable Lock protocol - Not Found
  Variable Driver Auto Update Lang, Lang:eng, PlatformLang:en
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFC75EBA
  InstallProtocolInterface: 330D4706-F2A0-4E4F-A369-B66FA8D54385 FFC75E80
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFC75ED2
  InstallProtocolInterface: 330D4706-F2A0-4E4F-A369-B66FA8D54385 FFC75E98
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFC75F30
  InstallProtocolInterface: 330D4706-F2A0-4E4F-A369-B66FA8D54385 FFC75F60
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFC75E40
  InstallProtocolInterface: 330D4706-F2A0-4E4F-A369-B66FA8D54385 FFC75E28
  MemoryProtectionAttribute - 0x0000000000000001
  InstallProtocolInterface: 9E863906-A40F-4875-977F-5B93FF237FC6 FFD32298
  Terminal - Mode 0, Column = 80, Row = 25
  Terminal - Mode 1, Column = 80, Row = 50
  Terminal - Mode 2, Column = 100, Row = 31
  ...
  ...
  ...

   < graphical Bds front page >

...but since I faked out the Timer Arch protocol, that's the end of the
story for now.

Architecture considerations
===========================

Code is currently built with ABIv1 to avoid --emit-relocs creating a bunch
of 16-bit TOC relocations that I have no hope of converting to PE32+ base relocs.

It seems that it should be possible to build as PIE (ET_DYN) ABIv2 and convert
R_PPC64_RELATIVE to base relocs as well, but that will involve a bit more
changes to GenFw/ElfConvert, as the later deals with section-specific
".rela.blah" sections, not runtime ".rela" that has no section back-
reference. In the end I think that's the only agreeable approach
(who wants to call an ABIv1 EFI runtime service from an ABIv2 OS? not me...),
but I'd rather make some forward progress without turtling more with the
build tools.

Platform considerations
=======================

The booting flow on a PowerNV machine would look something like:

-----------  
| hostboot |   This is the low-level initialization.
------------
     |
-----v------
| skiboot  |   This is the OPAL firmware.
------------
     |
-----v------
|   Ipl    |   This is UEFI loader that uses passed FDT and OPAL.
------------
     |
-----v------
|   DXE    |   This is proper UEFI.
------------
     |
-----v------
|   BDS    |   This is proper UEFI: we chose to boot an OS here.
------------
     |
-----v------
|    OS    |   OS can use FDT or ACPI.
------------

The approach taken is encouraged by AArch32 UEFI implementations
and by AArch64 Xen/QEMU virtual UEFI.

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
