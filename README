TianoCore on PowerPC 64 Little-Endian (OPAL/PowerNV)
====================================================

This is "UEFI" on top of OPAL firmware.

"UEFI" because the specification doesn't include PowerPC yet (ever?).

At some point this experiment will implement reduced-hardware
"ACPI" support, mapping the OPAL-based FDT into "ACPI" structures.

"ACPI" because it's also not specced out for PowerPC.

It's getting prototyped on top of QEMU and Skiboot (OPAL firmware).

I feel a sense of Deja Vu...
============================
This is not at all related to Benjamin Herrenschmidt's
PowerNV EDK2 tree over at his GitHub.

That tree is the one you should probably be looking at.

https://github.com/ozbenh/edk2

But if are interested in an alternate and completely
unrelated implementation, that is most certainly
never going to go anywhere beyond a proof of concept,
then read on :-).

Why
===

It's thought experiment gone too far. In short, there's IMO
value in presenting a common firmware environment shared with
other servers (X64, AARCH64). UEFI+ACPI keep the OEMs and IHVs in their
comfort zone, and reduce pointless platform boot and configuration
variance across different architectures. It also allows plug-in cards
to work (assuming EBC ROMs). Petitboot is a nice idea in theory,
but in practice it's probably more suitable to embedded environments
rather than whitebox servers that can compete with Intel boxes.

UEFI gets us a bootloader environment and device drivers for
I/O and booting via storage and networking. OPAL is the abstraction
layer for the machine.

Status
======

Can boot to UEFI shell. As far as devices only the OPAL console
is available.

See outstanding milestones and issues:
https://github.com/andreiw/ppc64le-edk2/issues

Building
========

You will need a LE 64-bit toolchain to build (i.e. ppc64le-linux).
A good source of toolchains is kernel.org.

After running ./edksetup.sh, modify your Conf/target.txt:
ACTIVE_PLATFORM       = PPC64Pkg/PPC64Pkg.dsc
TOOL_CHAIN_TAG        = GCC49

Then:
$ GCC49_PPC64_PREFIX=ppc64le-linux- build

Running
=======

You will need Skiboot and Benjamin Herrenschmidt's PowerNV QEMU tree.

Good directions for both QEMU/PowerNV and Skiboot:
https://www.flamingspork.com/blog/2015/08/28/running-opal-in-qemu-the-powernv-platform/

Until I fix the toolchain to create a self-booting UEFI FD, you will
also need http://github.com/andreiw/ppc64le_hello as a loader. See README
for building instructions.

After that, assuming skiboot.lid is in current working directory,
$ qemu-system-ppc64 -m 4G -M powernv -kernel ppc64le_hello -nographic -initrd ~/src/edk2/Build/PPC64/DEBUG_GCC49/FV/POWERNV.fd

You shall see some spew from Skiboot followed by a menu printed by
ppc64le_hello. Press 'I' at the menu since we want to run the FD image
passed as initrd. You should now see:

initrd is 0x40000000-0x40500000
ABIv1
calling 0x40001008
PPC64LE UEFI firmware (PPC64LE Prototype built at 00:01:03 on Oct 13 2015)
TB 512000000 Hz
System RAM @ 0x0 - 0xFFFFFFFF
Ipl total @ 0x40000000-0x40911000
Ipl used  @ 0x40000000-0x40511000
Stack     @ 0x40500000-0x40510000
Ipl free  @ 0x40511000-0x40911000
FDT @ 0x4090E000-0x40910D21
/memreserve/ 0x31C00000 0x20000;
/memreserve/ 0x31000000 0xC00000;
/memreserve/ 0x30300000 0xD00000;
/memreserve/ 0x30000000 0x300000;
/memreserve/ 0x39C00000 0x1C0200;
FIXME: Going to skip all 0x30000000-0x39DC0200
Loading DxeCore at 0x00408CA000 EntryPoint=0x0040908460
CoreInitializeMemoryServices:
  BaseAddress - 0x40911000 Length - 0xBF6EF000 MinimalMemorySizeNeeded - 0x10000
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B 40907418
  HOBLIST address in DXE = 0xFFFFC018
  Memory Allocation 0x00000004 0x40000000 - 0x40510FFF
  Memory Allocation 0x00000004 0x4090E000 - 0x40910FFF
  Memory Allocation 0x00000004 0x40500000 - 0x4050FFFF
  Memory Allocation 0x00000004 0x408CA000 - 0x4090DFFF
  Memory Allocation 0x00000003 0x408CA000 - 0x4090DFFF
  FV Hob            0x40000000 - 0x404FFFFF
  InstallProtocolInterface: D8117CFE-94A6-11D4-9A3A-0090273FC14D 409073A8
  InstallProtocolInterface: 8F644FA9-E850-4DB1-9CE2-0B44698E8DA4 FFFF8270
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFFF8658
  InstallProtocolInterface: 220E73B6-6BDB-4413-8405-B974B108619A FFFF3DB0
  InstallProtocolInterface: FC1BCDB0-7D31-49AA-936A-A4600D9DD083 409073C8
  Loading driver 80CF7257-87AB-47F9-A3FE-D50B76D89541
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE8C2C0
  Loading driver at 0x000FFE08000 EntryPoint=0x000FFE161E8 PcdDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE8C498
  InstallProtocolInterface: 11B34006-D85B-4D0A-A290-D5A571310EF7 FFE16020
  InstallProtocolInterface: 13A3F0F6-264A-3EF0-F2E0-DEC512342F34 FFE16118
  InstallProtocolInterface: 5BE40F57-FA68-4610-BBBF-E9C5FCDAD365 FFE161A8
  InstallProtocolInterface: FD0F4478-0EFD-461D-BA2D-E58C45FD5F5E FFE161C0
  Loading driver B8D9444E-D72A-451F-9BDB-BAFB52A68415
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE2A280
  Loading driver at 0x000FFDFE000 EntryPoint=0x000FFE06068 PPC64CpuDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE2A6D8
  My TOC is at 0xFFE0E000
  [3089776648,3] OPAL: Trying a CPU re-init with flags: 0x2
  InstallProtocolInterface: 26BACCB1-6F42-11D4-BCE7-0080C73C8881 FFE06008
  Loading driver B601F8C4-43B7-4784-95B1-F4226CB40CEE
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE29180
  Loading driver at 0x000FFDF4000 EntryPoint=0x000FFDFC078 RuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE29CD8
  InstallProtocolInterface: B7DFB4E1-052F-449F-87BE-9818FC91B733 FFDFC008
  Loading driver F80697E9-7FD6-4665-8646-88E33EF71DFC
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE29400
  Loading driver at 0x000FFDE5000 EntryPoint=0x000FFDED038 SecurityStubDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE29858
  InstallProtocolInterface: 94AB2F58-1438-4EF1-9152-18941A3A0E68 FFDED010
  InstallProtocolInterface: A46423E3-4617-49F1-B9FF-D1BFA9115839 FFDED008
  Loading driver 02B01AD5-7E59-43E8-A6D8-238180613A5A
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE26A80
  Loading driver at 0x000FFDC8000 EntryPoint=0x000FFDD4028 EmuVariableRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE26E18
  InstallProtocolInterface: 1E5668E2-8481-11D4-BCF1-0080C73C8881 0
  InstallProtocolInterface: 6441F818-6362-4E44-B570-7DBA31DD2453 0
  Loading driver 4B28E4C7-FF36-4E10-93CF-A82159E777C5
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE26440
  Loading driver at 0x000FFD9D000 EntryPoint=0x000FFDA4028 ResetSystemRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE1BE58
  InstallProtocolInterface: 27CFAC88-46CC-11D4-9A38-0090273FC14D 0
  Loading driver B336F62D-4135-4A55-AE4E-4971BBF0885D
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE1B140
  Loading driver at 0x000FFD94000 EntryPoint=0x000FFD9B068 RealTimeClock.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE1B318
  InstallProtocolInterface: 27CFAC87-46CC-11D4-9A38-0090273FC14D 0
  Loading driver 4C6E0267-C77D-410D-8100-1495911A989D
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE1A0C0
  Loading driver at 0x000FFD8C000 EntryPoint=0x000FFD92038 MetronomeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE1AE58
  InstallProtocolInterface: 26BACCB2-6F42-11D4-BCE7-0080C73C8881 FFD92008
  Loading driver 348C4D62-BFBD-4882-9ECE-C80BB1C4783B
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE1A2C0
  Loading driver at 0x000FFD1F000 EntryPoint=0x000FFD52228 HiiDatabase.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE1AA58
  InstallProtocolInterface: E9CA4775-8657-47FC-97E7-7ED65A084324 FFD52030
  InstallProtocolInterface: 0FD96974-23AA-4CDC-B9CB-98D17750322A FFD52078
  InstallProtocolInterface: EF9FC172-A1B2-4693-B327-6D32FC416042 FFD520A0
  InstallProtocolInterface: 587E72D7-CC50-4F79-8209-CA291FC1A10F FFD520F8
  InstallProtocolInterface: 0A8BADD5-03B8-4D19-B128-7B8F0EDAA596 FFD52128
  InstallProtocolInterface: 31A6406A-6BDF-4E46-B2A2-EBAA89C40920 FFD52050
  Loading driver D3987D4B-971A-435F-8CAF-4967EB627241
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFE19140
  Loading driver at 0x000FFD84000 EntryPoint=0x000FFD8A0B8 SerialDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFE19858
  InstallProtocolInterface: BB25CF6F-F1D4-11D2-9A0C-0090273FC1FD FFD8A058
  InstallProtocolInterface: 09576E91-6D3F-11D2-8E39-00A0C969723B FFD8A008
  Loading driver 9B680FCE-AD6B-4F3A-B60B-F59899003443
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDE4040
  Loading driver at 0x000FFD06000 EntryPoint=0x000FFD1B5C8 DevicePathDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDE4E58
  InstallProtocolInterface: 0379BE4E-D706-437D-B037-EDB82FB772A4 FFD1B010
  InstallProtocolInterface: 8B843E20-8132-4852-90CC-551A4E4A7F1C FFD1B050
  InstallProtocolInterface: 05C99A21-C70F-4AD2-8A5F-35DF3343F51E FFD1B060
  Loading driver 49EA041E-6752-42CA-B0B1-7344FE2546B7
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDE4340
  Loading driver at 0x000FFD7C000 EntryPoint=0x000FFD82048 PPC64TimerDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDE4798
  InstallProtocolInterface: 26BACCB3-6F42-11D4-BCE7-0080C73C8881 FFD82008
  Loading driver 42857F0A-13F2-4B21-8A23-53D3F714B840
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDE3B40
  Loading driver at 0x000FFD67000 EntryPoint=0x000FFD6F028 CapsuleRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDE3298
  InstallProtocolInterface: 5053697E-2CBC-4819-90D9-0580DEEE5754 0
  Loading driver AD608272-D07F-4964-801E-7BD3B7888652
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDE3500
  Loading driver at 0x000FFD5E000 EntryPoint=0x000FFD65028 MonotonicCounterRuntimeDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDDDE58
  InstallProtocolInterface: 1DA97072-BDDC-4B30-99F1-72A0B56FFF2A 0
  Loading driver EBF342FE-B1D3-4EF8-957C-8048606FF671
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDDD700
  Loading driver at 0x000FFC9D000 EntryPoint=0x000FFCCD138 SetupBrowser.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDDD198
  InstallProtocolInterface: B9D4C360-BCFB-4F9B-9298-53C136982258 FFCCD020
  InstallProtocolInterface: A770C357-B693-4E6D-A6CF-D21C728E550B FFCCD050
  InstallProtocolInterface: 1F73B18D-4630-43C1-A1DE-6F80855D7DA4 FFCCD030
  Loading driver FC5C7020-1A48-4198-9BE2-EAD5ABC8CF2F
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDDC140
  Loading driver at 0x000FFBAB000 EntryPoint=0x000FFBFB138 BdsDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDDC8D8
  InstallProtocolInterface: 665E3FF6-46CC-11D4-9A38-0090273FC14D FFBF9008
  Loading driver F099D67F-71AE-4C36-B2A3-DCEB0EB2B7D8
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFDDB980
  Loading driver at 0x000FFCFE000 EntryPoint=0x000FFD04038 WatchdogTimer.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFDDBB58
  InstallProtocolInterface: 665E3FF5-46CC-11D4-9A38-0090273FC14D FFD04008
  Loading driver E660EA85-058E-4B55-A54B-F02F83A24707
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFD7B040
  Loading driver at 0x000FFC74000 EntryPoint=0x000FFC9A128 DisplayEngine.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFD7BE58
  InstallProtocolInterface: 9BBE29E9-FDA1-41EC-AD52-452213742D2E FFC9A0D8
  Loading driver 51CCF399-4FDF-4E55-A45B-E123F84D456A
  InstallProtocolInterface: 5B1B31A1-9562-11D2-8E3F-00A0C969723B FFD781C0
  Loading driver at 0x000FFCE7000 EntryPoint=0x000FFCF00D8 ConPlatformDxe.efi
  InstallProtocolInterface: BC62157E-3E33-4FEC-9920-2D3B36D750DF FFD78398
  InstallProtocolInterface: 18A031AB-B443-4D1A-A5C0-0C09261E9F71 FFCF0008
  UEFI Interactive Shell v2.187477C2-69C7-11D2-8E39-00A0C969723B FFC61720
  EDK IIlProtocolInterface: 752F3136-4E16-4FDC-A22A-E5F46812F4CA FFC67C58
  UEFI v2.50 (EDK II, 0x00010000)008-7F9B-4F30-87AC-60C9FEF5DA4E FF8EE168
  map: No mapping found.
  Press ESC in 5 seconds to skip startup.nsh or any other key to continue.
  Shell>
  Shell> devtree
   Ctrl[03] MemoryMapped(0xB,0x40000000,0x4035DFFF)
   Ctrl[18] VenHw(D3987D4B-971A-435F-8CAF-4967EB627241)/Uart(115200,8,N,1)
     Ctrl[33] Tty Terminal Serial Console
   Ctrl[2F] VenHw(3EBFA8E6-511D-4B5B-A95F-FB38260F1C27)
   Ctrl[30] VenHw(F76E0A70-B5ED-4C38-AC9A-E5F54BF16E34)
   Ctrl[31] VenHw(847BC3FE-B974-446D-9449-5AD5412E993B)
   Ctrl[32] VenHw(9E0C30BC-3F06-4BA6-8288-09179B855DBE)
  Shell>
  Shell> ver -_fv
  UEFI Interactive Shell v2.1
  EDK II
  UEFI v2.50 (EDK II, 0x00010000)
  PPC64LE Prototype
  Shell>

Architecture considerations
===========================

TianoCore runs in HV mode and uses the hypervisor decrementer. Future
work may consider autodetecting and being capable of running in priviledged
mode only (such as in a VM).

Code is currently built with ABIv1 to avoid --emit-relocs creating a bunch
of 16-bit TOC relocations that I have no hope of converting to PE32+ base relocs.

It seems that it should be possible to build as PIE (ET_DYN) ABIv2 and convert
R_PPC64_RELATIVE to base relocs as well, but that will involve a bit more
changes to GenFw/ElfConvert, as the later deals with section-specific
".rela.blah" sections, not runtime ".rela" that has no section back-
reference. In the end I think that's the only agreeable approach
(who wants to call an ABIv1 EFI runtime service from an ABIv2 OS? not me...),
but I'd rather make some forward progress without turtling more with the
build tools.

Platform considerations
=======================

The booting flow on a PowerNV machine would look something like:

-----------  
| hostboot |   This is the low-level initialization.
------------
     |
-----v------
| skiboot  |   This is the OPAL firmware.
------------
     |
-----v------
|   Ipl    |   This is UEFI loader that uses passed FDT and OPAL.
------------
     |
-----v------
|   DXE    |   This is proper UEFI.
------------
     |
-----v------
|   BDS    |   This is proper UEFI: we chose to boot an OS here.
------------
     |
-----v------
|    OS    |   OS can use FDT or ACPI.
------------

The approach taken is encouraged by AArch32 UEFI implementations
and by AArch64 Xen/QEMU virtual UEFI. A lot of EmbeddedPkg
components and design decisions are leveraged.

Contact Info
============

Andrei Warkentin (andrey.warkentin@gmail.com).
